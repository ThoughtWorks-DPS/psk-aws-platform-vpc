---
version: 2.1

orbs:
  #checkov:skip=CKV_CIRCLECIPIPELINES_3
  terraform: twdps/terraform@2.0.4
  op: twdps/onepassword@2.0.6
  do: twdps/pipeline-events@dev:alpha

# ============================================================ pipeline globals

globals:
  - &context empc-lab
  - &executor-image twdps/circleci-infra-aws:alpine-5.1.0

on-push-main: &on-push-main
  branches:
    only: /main/
  tags:
    ignore: /.*/

on-tag-main: &on-tag-main
  branches:
    ignore: /.*/
  tags:
    only: /.*/

# ============================================================ commands and jobs

commands:

  set-environment:
    description: generate environment credentials and configuration from templates
    parameters:
      cluster:
        description: cluster to be configured
        type: string
    steps:
      - op/env:
          env-file: op.<< parameters.cluster >>.env
      - run:
          name: set ~/.terraformrc
          command: op inject -i tpl/terraformrc.tpl -o ~/.terraformrc
      - run:
          name: set << parameters.cluster >> environment variables
          command: op inject -i environments/<< parameters.cluster >>.auto.tfvars.json.tpl -o << parameters.cluster >>.auto.tfvars.json

  aws-integration-tests:
    description: run awspec aws configuration tests
    parameters:
      cluster:
        description: tf workspace name
        type: string
    steps:
      - run:
          name: run awspec aws configuration tests
          environment:
            WORKSPACE: <<parameters.cluster>>
          command: bash scripts/run_awspec_integration_tests.sh << parameters.cluster >>

jobs:

  recurring-integration-tests:
    description: |
      Recurring job (weekly) to run pipeline integration tests to detect aws configuration drift
    docker:
      - image: *executor-image
    environment:
      TF_WORKSPACE: << parameters.cluster >>
    shell: op run --env-file op.<< parameters.cluster >>.env -- /bin/sh -eo pipefail
    parameters:
      cluster:
        description: nonprod or production cluster configuration
        type: string
    steps:
      - checkout
      - setup_remote_docker
      - set-environment:
          cluster: << parameters.cluster >>
      - aws-integration-tests:
          cluster: << parameters.cluster >>

# ============================================================ workflows

workflows:

  # deploy sbx-i01-aws-us-east-1 vpc:
  #   when:
  #     not:
  #       equal: [ scheduled_pipeline, << pipeline.trigger_source >> ]
  #   jobs:
  #     - terraform/static-analysis:
  #         name: static code analysis
  #         context: *context
  #         shell: op run --env-file op.sbx-i01-aws-us-east-1.env -- /bin/bash -eo pipefail
  #         executor-image: *executor-image
  #         workspace: sbx-i01-aws-us-east-1
  #         tflint-scan: true
  #         tflint-provider: aws
  #         trivy-scan: true
  #         before-static-analysis:
  #           - op/env:
  #               env-file: op.sbx-i01-aws-us-east-1.env
  #         filters: *on-push-main

  #     - terraform/plan:
  #         name: sbx-i01-aws-us-east-1 change plan
  #         context: *context
  #         shell: op run --env-file op.sbx-i01-aws-us-east-1.env -- /bin/bash -eo pipefail
  #         executor-image: *executor-image
  #         workspace: sbx-i01-aws-us-east-1
  #         checkov-scan: true
  #         before-plan:
  #           - set-environment:
  #               cluster: sbx-i01-aws-us-east-1
  #         filters: *on-push-main

  #     - approve sbx-i01-aws-us-east-1 changes:
  #         type: approval
  #         requires:
  #           - static code analysis
  #           - sbx-i01-aws-us-east-1 change plan
  #         filters: *on-push-main

  #     - terraform/apply:
  #         name: apply sbx-i01-aws-us-east-1 changes
  #         context: *context
  #         shell: op run --env-file op.sbx-i01-aws-us-east-1.env -- /bin/bash -eo pipefail
  #         workspace: sbx-i01-aws-us-east-1
  #         before-apply:
  #           - set-environment:
  #               cluster: sbx-i01-aws-us-east-1
  #         after-apply:
  #           - aws-integration-tests:
  #               cluster: sbx-i01-aws-us-east-1
  #         requires:
  #           - approve sbx-i01-aws-us-east-1 changes
  #         filters: *on-push-main

  deploy prod-i01-aws-us-east-2 vpc:
    jobs:
      - terraform/plan:
          name: prod-i01-aws-us-east-2 change plan
          context: *context
          shell: op run --env-file op.prod-i01-aws-us-east-2.env -- /bin/bash -eo pipefail
          executor-image: *executor-image
          workspace: prod-i01-aws-us-east-2
          checkov-scan: true
          before-plan:
            - set-environment:
                cluster: prod-i01-aws-us-east-2
          filters: *on-tag-main

      - approve prod-i01-aws-us-east-2 changes:
          type: approval
          requires:
            - prod-i01-aws-us-east-2 change plan
          filters: *on-tag-main

      - terraform/apply:
          name: apply prod-i01-aws-us-east-2 changes
          context: *context
          shell: op run --env-file op.prod-i01-aws-us-east-2.env -- /bin/bash -eo pipefail
          workspace: prod-i01-aws-us-east-2
          before-apply:
            - set-environment:
                cluster: prod-i01-aws-us-east-2
          after-apply:
            - aws-integration-tests:
                cluster: prod-i01-aws-us-east-2
            - do/slack-bot:
                channel: lab-events
                message: Release psk-aws-platform-vpc
                include-link: true
                include-tag: true
          requires:
            - approve prod-i01-aws-us-east-2 changes
          filters: *on-tag-main

  schedule weekly integration test:
    jobs:
      - do/schedule-pipeline:
          name: weekly integration test
          context: *context
          shell: op run --env-file op.prod-i01-aws-us-east-2.env -- /bin/bash -eo pipefail
          scheduled-pipeline-name: weekly-integration-test
          scheduled-pipeline-description: |
            Weekly, automated run of platform vpc integration tests
          hours-of-day: "[1]"
          days-of-week: "[\"SUN\"]"
          filters: *on-push-main

  weekly integration test:
    when:
      equal: [ scheduled_pipeline, << pipeline.trigger_source >> ]
    jobs:
      - recurring-integration-tests:
          name: sbx-i01-aws-us-east-1 integration test
          context: *context
          cluster: sbx-i01-aws-us-east-1
      - recurring-integration-tests:
          name: prod-i01-aws-us-east-2 integration test
          context: *context
          cluster: prod-i01-aws-us-east-2
