version: 2.1

setup: true  # using continuation generated pipeline

# =================== global config

orbs:
  continuation: circleci/continuation@0.4.0
  #checkov:skip=CKV_CIRCLECIPIPELINES_3
  terraform: twdps/terraform@dev:latest
  op: twdps/onepassword@1.0.0
  do: twdps/pipeline-events@2.0.0

globals:
  - &context empc-lab
  - &executor-image twdps/circleci-infra-aws:alpine-4.15.0
  - &shell op run --env-file op.nonprod.env -- /bin/bash -eo pipefail
  - &snyk-organization twdps

on-push-main: &on-push-main
  branches:
    only: /main/
  tags:
    ignore: /.*/

on-tag-main: &on-tag-main
  branches:
    ignore: /.*/
  tags:
    only: /.*/

# ===================================

commands:

  set-environment:
    description: generate environment credentials and configuration from templates
    parameters:
      static: 
        description: set-environment for static-analysis only run 
        type: boolean
        default: false
      account-env:
        description: use this file for 1password ENV injection
        type: string
        default: ""
      instance-name:
        description: cluster instance
        type: string
        default: ""
    steps:
      - op/env:
          env-file: op.<< parameters.account-env >>.env
      - run:
          name: set ~/.terraformrc
          command: op inject -i tpl/terraformrc.tpl -o ~/.terraformrc
      - unless:
          condition: << parameters.static >>
          steps:
            - restore_cache:
                name: restore circlecigen generated tfvars
                keys:
                  - circlecigen-tfvars-$CIRCLE-SHA1
            - run:
                name: set << parameters.instance-name >> environment variables
                command: op inject -i environments/<< parameters.instance-name >>.tfvars.json -o << parameters.instance-name >>.auto.tfvars.json

  run-inspec-tests:
    description: run aws inpec tests
    parameters:
      workspace:
        description: tf workspace name
        type: string
    steps:
      - run:
          name: run inspec tests
          environment:
            WORKSPACE: <<parameters.workspace>>
          command: bash scripts/run_inspec_integration_tests.sh << parameters.workspace >>

jobs:

  launch-dynamic-pipeline:
    parameters:
      pipeline-name:
        description: name of pipeline to use from the multi file
        type: string
      workflow-name:
        description: Custom name for the resulting workflow within the generated_config.yml
        type: string
      template-file:
        description: Custom CircleCI template file to use for pipeline generation
        type: string
        default: ""
      multi-config:
        description: Name of the multi-environment definition/configuration file to use
        type: string
        default: multi.json
    executor: continuation/default
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: install needed packages
          command: |
            sudo apt-get update && sudo apt-get install python3-pip && pip install circlecigen==0.0.9
            curl -L https://cache.agilebits.com/dist/1P/op2/pkg/v2.18.0-beta.01/op_linux_amd64_v2.18.0-beta.01.zip -o op.zip
            unzip -o op.zip && sudo mv op /usr/local/bin/op
      - run:
          name: generate continuation pipeline
          command: |
            op read op://empc-lab/psk-platform-global-env-values/control-plane-deployment | base64 -d > environments/multi.json
            circlecigen << parameters.pipeline-name >> --workflow << parameters.workflow-name >> <<#parameters.template-file>>--template << parameters.template-file >><</parameters.template-file>>
      - save_cache:
          name: persist generated circlecigen tfvars between workflows
          key: circlecigen-tfvars-$CIRCLE-SHA1
          paths:
            - environments/
      - continuation/continue:
          configuration_path: .circleci/generated_config.yml

  integration-tests:
    description: Recurring job to run pipeline integration tests and detect aws configuration drift
    docker:
      - image: *executor-image
    parameters:
      instance_name:
        description: the VPC instance to run tests against
        type: string
      account_env:
        description: the op filename to use for setting credentials
        type: string
      workspace:
        description: the VPC instance to run tests against
        type: string
    steps:
      - checkout
      - set-environment:
          instance_name: << parameters.instance_name >>
          account_env: << parameters.account_env>>
      - run-inspec-tests:
          workspace: << parameters.workspace >>

workflows:
  version: 2

  development build:
    when:
      not:
        equal: [ scheduled_pipeline, << pipeline.trigger_source >> ]
    jobs:
      - terraform/static-analysis:
          name: static analysis of psk-aws-platform-vpc terraform
          context: *context
          executor-image: *executor-image
          shell: *shell
          snyk-organization: *snyk-organization
          snyk-additional-args: --severity-threshold=high
          checkov-additional-args: --skip-check CKV_CIRCLECIPIPELINES_2
          before-static-analysis:
            - set-environment: 
                static: true
                account-env: nonprod 
          filters: *on-push-main

      - launch-dynamic-pipeline:
          name: generate sandbox pipeline
          context: *context
          pipeline-name: sandbox
          workflow-name: sandbox-deployment
          multi-config: multi.json
          requires:
            - static analysis of psk-aws-platform-vpc terraform
          filters: *on-push-main

      - do/schedule-pipeline:
          before-release:
            - set-environment: 
                static: true 
                account-env: nonprod
          name: Deploy sandbox nightly schedule
          scheduled-pipeline-name: nightly-sandbox-validation-schedule
          shell: *shell
          context: *context
          executor-image-name: *executor-image
          scheduled-pipeline-description: |
            Automatically triggers nightly run of main pipeline for validating sandbox deployment pipeline vpcs
          hours-of-day: "[1]"
          days-of-week: "[\"SUN\"]"
          filters: *on-push-main

      - do/schedule-pipeline:
          before-release:
            - set-environment: 
                static: true 
                account-env: prod
          name: Deploy release nightly schedule
          scheduled-pipeline-name: nightly vpc validation - release
          shell: *shell
          context: *context
          executor-image-name: *executor-image
          scheduled-pipeline-description: |
            Automatically triggers nightly run of main pipeline for validating vpcs in release
          hours-of-day: "[1]"
          days-of-week: "[\"SUN\"]"
          filters: *on-push-main


  production release:
    when:
      not:
        equal: [ scheduled_pipeline, << pipeline.trigger_source >> ]
    jobs:
      - launch-dynamic-pipeline:
          name: generate release pipeline
          pipeline-name: release
          workflow-name: release-deployment
          multi-config: multi.json
          filters: *on-tag-main


  run nightly sandbox validation jobs:
    when:
      and:
        - equal: [ scheduled_pipeline, << pipeline.trigger_source >> ]
        - equal: [ nightly-sandbox-validation-schedule, << pipeline.schedule.name >> ]
    jobs:
      - launch-dynamic-pipeline:
          name: generate-sandbox-nightly-pipeline
          pipeline-name: sandbox
          workflow-name: nightly-sandbox-validation
          template-file: nightly.yml
          multi-config: multi.json
          filters: *on-push-main

  run nightly release validation jobs:
    when:
      and:
        - equal: [ scheduled_pipeline, << pipeline.trigger_source >> ]
        - equal: [ nightly-release-validation-schedule, << pipeline.schedule.name >> ]
    jobs:
      - launch-dynamic-pipeline:
          name: generate-platform-nightly-pipeline
          pipeline-name: release
          workflow-name: nightly-release-validation
          template-file: nightly.yml
          multi-config: multi.json
          filters: *on-push-main